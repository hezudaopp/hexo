vnote_backup_file_826537664 /Users/jawinton/github/hexo/source/_posts/最终一致性落地.md
---
title: 最终一致性落地
date: 2019-01-06 20:45:16
tags: 
- BASE
- 最终一致性
---

#### 1. 最终一致性思路

以下方案不考虑业务逆操作。

##### 1.1. 退单业务为例
1. 生成一个全局唯一事务id（TRANSACTION_ID），并写入全局事务log表，状态设置为`开始成功`（事务协调器执行）
2. 异步执行订单退单业务，发同步消息队列（send ack）通知事务协调器第二步成功（订单服务执行）
3. 消费第二步的消息，更新全局事务log表，状态设置为`第一阶段成功`（事务协调器执行）
4. 异步执行回库业务（需要保证幂等性），发同步消息队列（send ack）通知事务协调器第四步成功（商品服务执行）
5. 消费第四步的消息，更新全局事务log表，状态设置为`第二阶段成功`（事务协调器执行）

##### 1.2. 失败分析

1. 第一步失败，不做操作。
2. 第二步失败，异常回滚，发同步消息队列（send ack）通知事务协调器第二步失败，事务状态设置为`第一阶段失败`
3. 第三步失败，也就是说第二步成功，但是事务状态更新失败了，消费者指数递增重试。
4. 第四步失败，两种方案
  - 调用第二步逆操作方法（该方案需要考虑该步失败情况，暂不考虑）
  - 定时轮询全局事务log表中状态为`第一阶段成功`的记录，重发消息重试第四步。
5. 第五步失败，也就是说第四步成功，但是事务状态更新失败了，消费者指数递增重试。


##### 1.3. 重试说明
- 所有重试操作需要记录重试次数，超过一定次数后需人工介入
- 所有重试操作都需要保证幂等性。
  - 事务状态更新的幂等性：通过乐观锁保证
  - 业务逻辑的幂等性，如果要统一处理，可以在业务方数据库添加一张额外的日志表，用主键约束保证

##### 1.4. 消息队列说明
- 业务方发送同步消息，需要发送成功确认，确保消息已经投递到消息队列。如果消息失败，则业务方事务回滚。
- 重试的消息，不应该影响阻塞正常消息的消费。


##### 1.5. 事务状态流转
- 表设计：
  - transacion: id, current_span_id, current_node, status, service_type, time_create, time_update
  - transaction_span: id, transaction_id, parent_span_id, node, retry_times, status, time_create
- 流程图
```flow
st=>start: 事务开始
op_1=>operation: 1：事务初始化
io_1_yes=>inputoutput: 事务初始化成功
op_2=>operation: 2：执行退单业务
io_2_yes=>inputoutput: 退单成功
op_3=>operation: 3：更新事务状态
io_3_yes=>inputoutput: ack退单成功
op_4=>operation: 4：执行回库业务
io_4_yes=>inputoutput: 回库成功
op_5=>operation: 5：更新事务状态
io_5_yes=>inputoutput: ack回库成功
e=>end: 事务结束
cond_1=>condition: 成功？
cond_2=>condition: 成功？
cond_3=>condition: 成功？
cond_4=>condition: 成功？
cond_5=>condition: 成功？
op_2_no=>operation: 回滚
io_2_no=>inputoutput: 执行退单业务失败
op_3_no=>operation: 重试
op_4_no=>operation: 重试
op_5_no=>operation: 重试
st->op_1->cond_1(yes)->io_1_yes->op_2->cond_2(yes)->io_2_yes->op_3->cond_3(yes)->io_3_yes->op_4->cond_4(yes)->io_4_yes->op_5->cond_5(yes)->io_5_yes(right)->e
cond_1(no)->e
cond_2(no)->op_2_no(right)->e
cond_3(no)->op_3_no(right)->op_3
cond_4(no)->op_4_no(right)->op_4
cond_5(no)->op_5_no(right)->op_5
```
